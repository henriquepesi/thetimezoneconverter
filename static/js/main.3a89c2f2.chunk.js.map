{"version":3,"sources":["Component/Data.js","Component/Data2.js","App.js","serviceWorker.js","index.js"],"names":["Data","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","value","isLoaded","handleChange","bind","assertThisInitialized","hour","Date","getHours","minute","getMinutes","concat","fetchData","event","target","setState","_this2","fetch","then","res","json","_this$state","react_default","a","createElement","className","type","name","formatted","slice","getHour","onChange","Component","Data2","App","Component_Data","Component_Data2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a89c2f2.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Data extends Component {\r\n  getHour() {\r\n    var hour = new Date().getHours()\r\n    var minute = new Date().getMinutes()\r\n    var hourMinute = `${hour}: ${minute}`\r\n    return hourMinute;\r\n  }\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        items: {},\r\n        value: '',\r\n        isLoaded: false\r\n      };\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n  \r\n    componentDidMount() {\r\n      const { value } = this.state;\r\n  \r\n      this.fetchData(value);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      const value = event.target.value;\r\n  \r\n      this.setState({\r\n        value\r\n      });\r\n  \r\n      this.fetchData(value);\r\n    }\r\n\r\n    fetchData(value) {\r\n        fetch(\r\n          `https://api.timezonedb.com/v2.1/get-time-zone?key=J9X3EOT2EM8U&format=json&by=zone&zone=${value}`\r\n        )\r\n          .then(res => res.json())\r\n          .then(json => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: json\r\n            });\r\n          });\r\n      }\r\n  \r\n    render() {\r\n      const { isLoaded, value } = this.state;\r\n  \r\n      if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      }\r\n        return (\r\n            <div>\r\n                <label className=\"control\">\r\n                    {this.state.value !== '' ? \r\n                        <input className=\"input is-info\" type=\"text\" name=\"\" value={this.state.items.formatted.slice(10 , 16, 18)} />\r\n                            :  \r\n                        <input className=\"input is-info\" type=\"text\" name=\"\" value={this.getHour()} />\r\n                    }\r\n                </label>\r\n                \r\n                <div className=\"control\">\r\n                    <div className=\"select is-fullwidth is-info\">\r\n                        <select onChange={this.handleChange} value={value}>\r\n                            <option value=\"\">Local Time</option>\r\n                            <option value=\"America/Chicago\">Chicago</option>\r\n                            <option value=\"America/Denver\">Denver</option>\r\n                            <option value=\"Europe/Berlin\">Berlin</option>\r\n                            <option value=\"Europe/Busingen\">Busingen</option>\r\n                            <option value=\"America/Sao_Paulo\">São Paulo</option>\r\n                            <option value=\"America/Fortaleza\">Fortaleza</option>\r\n                            <option value=\"Europe/London\">London</option>\r\n                            <option value=\"Asia/Dubai\">Dubai</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* {JSON.stringify(items)} */}\r\n\r\n                {/* <ul>\r\n                    <li>{this.state.items.countryName}</li>\r\n                    <li>{this.state.items.zoneName}</li>\r\n                    <li>{this.state.items.formatted}</li>\r\n                </ul> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Data;","import React, {Component} from 'react'\r\n\r\nclass Data2 extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        items: {},\r\n        value: \"\",\r\n        isLoaded: false\r\n      };\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n    }\r\n  \r\n    componentDidMount() {\r\n      const { value } = this.state;\r\n  \r\n      this.fetchData(value);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      const value = event.target.value;\r\n  \r\n      this.setState({\r\n        value\r\n      });\r\n  \r\n      this.fetchData(value);\r\n    }\r\n\r\n    fetchData(value) {\r\n        fetch(\r\n          `https://api.timezonedb.com/v2.1/get-time-zone?key=J9X3EOT2EM8U&format=json&by=zone&zone=${value}`\r\n        )\r\n          .then(res => res.json())\r\n          .then(json => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: json\r\n            });\r\n          });\r\n      }\r\n  \r\n    render() {\r\n      const { isLoaded, value } = this.state;\r\n  \r\n      if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      }\r\n  \r\n      return (\r\n        <div>\r\n         \r\n            <label className=\"control\">\r\n            {this.state.value === '' ? \r\n              <input className=\"input is-info\" type=\"text\" name=\"\" value=\"Select a state\" />\r\n                : \r\n                <input className=\"input is-info\" type=\"text\" name=\"\" value={this.state.items.formatted.slice(10 , 16, 18)} \r\n            />\r\n          }\r\n            </label>\r\n          \r\n\r\n            <div className=\"control\">\r\n                <div className=\"select is-fullwidth is-info\">\r\n                    <select onChange={this.handleChange} value={value}>\r\n                        <option value=\"\"></option>\r\n                        <option value=\"America/Chicago\">Chicago</option>\r\n                        <option value=\"America/Denver\">Denver</option>\r\n                        <option value=\"Europe/Berlin\">Berlin</option>\r\n                        <option value=\"Europe/Busingen\">Busingen</option>\r\n                        <option value=\"America/Sao_Paulo\">São Paulo</option>\r\n                        <option value=\"America/Fortaleza\">Fortaleza</option>\r\n                        <option value=\"Europe/London\">London</option>\r\n                        <option value=\"Asia/Dubai\">Dubai</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Data2;","import React, { Component } from 'react';\nimport './App.css';\nimport Data from './Component/Data'\nimport Data2 from './Component/Data2'\n\nimport 'bulma/css/bulma.css'\n\nclass App extends Component {\n  \n  render() {\n    return (\n    <div className=\"wrapper section\">\n      <div className=\"App columns\">\n        <div className=\"column is-8 is-offset-2\">\n            <h1 className=\"title has-text-info has-text-centered\">TimeZone Converter</h1>\n            <div className=\"columns is-flex\">\n                <div className=\"column is-6\">\n                    <Data />\n                </div>\n                <div className=\"column is-6\">\n                    <Data2 />\n                </div>\n            </div>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}